

import * as Js_exn from "./../../../bs-platform/lib/es6/js_exn.js";
import * as Caml_option from "./../../../bs-platform/lib/es6/caml_option.js";
import * as Caml_exceptions from "./../../../bs-platform/lib/es6/caml_exceptions.js";
import * as Caml_js_exceptions from "./../../../bs-platform/lib/es6/caml_js_exceptions.js";

var ParseError = Caml_exceptions.create("Json.ParseError");

function parse(s) {
  try {
    return Caml_option.some(JSON.parse(s));
  }
  catch (exn){
    return ;
  }
}

function parseOrRaise(s) {
  try {
    return JSON.parse(s);
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Js_exn.$$Error) {
      var match = exn[1].message;
      var message = match !== undefined ? match : "Unknown error";
      throw [
            ParseError,
            message
          ];
    } else {
      throw exn;
    }
  }
}

var Decode = /* alias */0;

var Encode = /* alias */0;

function stringify(prim) {
  return JSON.stringify(prim);
}

export {
  Decode ,
  Encode ,
  ParseError ,
  parse ,
  parseOrRaise ,
  stringify ,
  
}
/* No side effect */
